import { UserConfig, defineConfig, Plugin, PluginHookUtils } from "vite";
import path from "path";
import builtins from "builtin-modules";
import react from "@vitejs/plugin-react";

// const banner = `/*
// THIS IS A GENERATED/BUNDLED FILE BY VITE
// if you want to view the source, please visit the github repository of this plugin
// */
// `;

const myCustomPlugin: Plugin = {
	name: "my-custom-plugin",
	configResolved(config) {
		console.log(
			"myCustomPlugin: Vite build configuration config object",
			config
		);
	},
	watchChange(id, change) {
		console.log("myCustomPlugin: Watch change detected:", { id, change });
	},
};

export default defineConfig(async ({ mode }) => {
	const { resolve } = path;
	const prod = mode === "production";
	console.log(`vite.config.ts / defineConfig / mode=${mode} / prod=${prod}`);

	return {
		build: {
			cssCodeSplit: false,
			emptyOutDir: false,
			lib: {
				entry: resolve(__dirname, "src/main.ts"),
				fileName: () => "main.js",
				formats: ["cjs"],
				name: "main",
			},
			minify: prod,
			outDir: "dist",
			rollupOptions: {
				external: [
					"obsidian",
					"electron",
					"@codemirror/autocomplete",
					"@codemirror/collab",
					"@codemirror/commands",
					"@codemirror/language",
					"@codemirror/lint",
					"@codemirror/search",
					"@codemirror/state",
					"@codemirror/view",
					"@lezer/common",
					"@lezer/highlight",
					"@lezer/lr",
					...builtins,
				],
				input: {
					main: resolve(__dirname, "src/main.ts"),
				},
				output: {
					entryFileNames: "main.js",
					dir: "./",
					assetFileNames: "styles.css",
				},
				watch: {},
			},
			sourcemap: prod ? false : "inline",
			target: "es2022",
			watch: {},
		},
		plugins: [react(), myCustomPlugin],
		resolve: {
			alias: {
				"@": path.resolve(__dirname, "./src"),
			},
		},
	} as UserConfig;
});
