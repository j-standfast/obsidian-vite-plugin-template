import { UserConfig, defineConfig, Plugin } from "vite";
import path from "path";
import builtins from "builtin-modules";
import react from "@vitejs/plugin-react";

// const banner = `/*
// THIS IS A GENERATED/BUNDLED FILE BY VITE
// if you want to view the source, please visit the github repository of this plugin
// */
// `;

const logWatcherConfig: Plugin = {
  name: 'log-watcher-config',
  configureServer(server) {
    console.log('Chokidar watcher configuration:', {
      watchOptions: server.watcher.options,
      watchedPaths: server.watcher.getWatched()
    });
  }
};

export default defineConfig(async ({ mode }) => {
	const { resolve } = path;
	const prod = mode === "production";

	return {
		build: {
			cssCodeSplit: false,
			emptyOutDir: false,
			lib: {
				entry: resolve(__dirname, "src/main.ts"),
				fileName: () => "main.js",
				formats: ["cjs"],
				name: "main",
			},
			minify: prod,
			outDir: "dist",
			rollupOptions: {
				external: [
					"obsidian",
					"electron",
					"@codemirror/autocomplete",
					"@codemirror/collab",
					"@codemirror/commands",
					"@codemirror/language",
					"@codemirror/lint",
					"@codemirror/search",
					"@codemirror/state",
					"@codemirror/view",
					"@lezer/common",
					"@lezer/highlight",
					"@lezer/lr",
					...builtins,
				],
				input: {
					main: resolve(__dirname, "src/main.ts"),
				},
				output: {
          entryFileNames: "main.js",
          dir: './',
					// assetFileNames: "styles.css",
				},
			},
			sourcemap: prod ? false : "inline",
			target: "es2022",
		},
		plugins: [react(), logWatcherConfig],
		resolve: {
			alias: {
				"@": path.resolve(__dirname, "./src"),
			},
    },
    server: {
      watch: {
        usePolling: true,
        interval: 1000,
        // You might also need to explicitly exclude the output file
        ignored: ['main.js', 'main.js.map']
      }
    }
		// test: {
		// 	browser: {
		// 		enabled: true,
		// 	},
		// 	deps: {
		// 		external: [/^obsidian$/, ...builtins],
		// 	},
		// 	environment: "jsdom",
		// 	globals: true,
		// 	instances: [{ browser: "chromium" }],
		// 	setupFiles: ["./vitest.setup.ts"],
		// },
	} as UserConfig;
});
